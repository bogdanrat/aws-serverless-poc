AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Serverless Books API

Parameters:
  APIName:
    Type: String
    Default: BooksAPI
    Description: The API Gateway name
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 20
    MinLength: 2
    ConstraintDescription: "2-20 Latin letters"
  StageName:
    Type: String
    Default: dev
    Description: The API Gateway deployment stage
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 10
    MinLength: 2
    ConstraintDescription: "2-10 Latin letters"
  LambdaAlias:
    Type: String
    Default: dev
    Description: The Lambda Alias to publish
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 10
    MinLength: 2
    ConstraintDescription: "2-10 Latin letters"
  TableName:
    Type: String
    Default: Books
    Description: The DynamoDB Table Name
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 20
    MinLength: 3
    ConstraintDescription: "2-10 Latin letters"
  TableCategoryIndex:
    Type: String
    Default: CategoryIndex
    Description: The DynamoDB Table Category Global Secondary Index Name
    MaxLength: 20
    MinLength: 3
  TableTitleIndex:
    Type: String
    Default: TitleIndex
    Description: The DynamoDB Table Title Global Secondary Index Name
    MaxLength: 20
    MinLength: 3
  BucketName:
    Type: String
    Default: aws-serverless-poc
    Description: The S3 Bucket for deployments
  ContactEmailAddress:
    Type: String
    Description: Email address for books notifications

Conditions:
  ContactEmailSet: !Not [ !Equals [ '', !Ref ContactEmailAddress ] ]

Resources:
  # Get all books Lambda Function
  GetAllBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetAllBooks
      Handler: main
      Runtime: go1.x
      AutoPublishAlias: !Ref LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role: !GetAtt GetAllBooksFunctionRole.Arn
      CodeUri: ../functions/get-books/deployment.zip
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          TABLE_NAME: !Ref BooksTable
      Events:
        GetBooksEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  # Get all books Lambda Function Role
  GetAllBooksFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      # Allow Lambda ato assume this role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: "CreateCloudWatchLogsPolicy"
          # Allow Lambda to write to CloudWatch Logs & Metrics
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: "CreateCloudWatchMetricsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
        - PolicyName: "GetDynamoDBTableItemsPolicy"
          # Allow Lambda to Scan the DynamoDB Table
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}/index/ID'
  # Create books Lambda Function
  CreateBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateBooks
      Handler: main
      Runtime: go1.x
      AutoPublishAlias: !Ref LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role: !GetAtt CreateBooksFunctionRole.Arn
      CodeUri: ../functions/create-books/deployment.zip
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          TABLE_NAME: !Ref BooksTable
      Events:
        CreateBooksEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  # Create books Lambda Function Role
  CreateBooksFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      # Allow Lambda to assume this role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: "CreateCloudWatchLogsPolicy"
          # Allow Lambda to write to CloudWatch Logs & Metrics
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: "CreateCloudWatchMetricsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
        - PolicyName: "WriteDynamoDBTableItemsPolicy"
          # Allow Lambda to Put items into the DynamoDB Table
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}'
  # Search books Lambda Function
  SearchBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SearchBooks
      Handler: main
      Runtime: go1.x
      AutoPublishAlias: !Ref LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role: !GetAtt SearchBooksFunctionRole.Arn
      CodeUri: ../functions/search-books/deployment.zip
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          TABLE_NAME: !Ref BooksTable
          TABLE_CATEGORY_INDEX_NAME: !Ref TableCategoryIndex
          TABLE_TITLE_INDEX_NAME: !Ref TableTitleIndex
      Events:
        SearchBooksEvent:
          Type: Api
          Properties:
            Path: /search
            Method: get
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  # Search books Lambda Function Role
  SearchBooksFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      # Allow Lambda to assume this role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: "CreateCloudWatchLogsPolicy"
          # Allow Lambda to write to CloudWatch Logs & Metrics
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: "CreateCloudWatchMetricsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
        - PolicyName: "GetDynamoDBTableItemsPolicy"
          # Allow Lambda to Get items from the DynamoDB Table
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}/index/*'
  # Update book Lambda Function
  UpdateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateBook
      Handler: main
      Runtime: go1.x
      AutoPublishAlias: !Ref LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role: !GetAtt UpdateBookFunctionRole.Arn
      CodeUri: ../functions/update-book/deployment.zip
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          TABLE_NAME: !Ref BooksTable
      Events:
        FullUpdateBookEvent:
          Type: Api
          Properties:
            Path: /
            Method: put
            RestApiId:
              Ref: BooksAPI
        PartialUpdateBookEvent:
          Type: Api
          Properties:
            Path: /
            Method: patch
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  # Update book Lambda Function Role
  UpdateBookFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      # Allow Lambda to assume this role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: "CreateCloudWatchLogsPolicy"
          # Allow Lambda to write to CloudWatch Logs & Metrics
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: "CreateCloudWatchMetricsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
        - PolicyName: "UpdateDynamoDBTableItemsPolicy"
          # Allow Lambda to Update items from the DynamoDB Table
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}'
  # Delete books Lambda Function
  DeleteBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteBooks
      Handler: main
      Runtime: go1.x
      AutoPublishAlias: !Ref LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role: !GetAtt DeleteBooksFunctionRole.Arn
      CodeUri: ../functions/delete-books/deployment.zip
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          TABLE_NAME: !Ref BooksTable
      Events:
        DeleteBooksEvent:
          Type: Api
          Properties:
            Path: /
            Method: delete
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  # Delete books Lambda Function Role
  DeleteBooksFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      # Allow Lambda to assume this role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: "CreateCloudWatchLogsPolicy"
          # Allow Lambda to write to CloudWatch Logs & Metrics
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: "CreateCloudWatchMetricsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
        - PolicyName: "DeleteDynamoDBTableItemsPolicy"
          # Allow Lambda to Delete items from the DynamoDB Table
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}'
  # DynamoDB Streams processor Lambda Function
  BooksStreamsProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BooksStreamProcessor
      Handler: main
      Runtime: go1.x
      AutoPublishAlias: !Ref LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role: !GetAtt BooksStreamsProcessorFunctionRole.Arn
      CodeUri: ../functions/stream-processor/deployment.zip
      Environment:
        Variables:
          BOOKS_TOPIC_ARN: !Ref BooksTopic
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  # DynamoDB Streams processor Lambda Function Role
  BooksStreamsProcessorFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        # Allow Lambda to assume this role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: "CreateCloudWatchLogsPolicy"
          # Allow Lambda to write to CloudWatch Logs & Metrics
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: "CreateCloudWatchMetricsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
        - PolicyName: "UpdateDynamoDBTableItemsPolicy"
          # Allow Lambda to get streams from the DynamoDB Table
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}/stream/*'
        - PolicyName: "PublishBooksSNSTopicPolicy"
          # Allow Lambda to publish messages to SNS
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:publish
                Resource: !Ref BooksTopic
  # DynamoDB Table
  BooksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: Author
          AttributeType: S
        - AttributeName: Title
          AttributeType: S
        - AttributeName: Category
          AttributeType: S
      KeySchema:
        - AttributeName: Author
          KeyType: HASH
        - AttributeName: Title
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      GlobalSecondaryIndexes:
        - IndexName: !Ref TableCategoryIndex
          KeySchema:
            - AttributeName: Category
              KeyType: HASH
            - AttributeName: Author
              KeyType: RANGE
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: !Ref TableTitleIndex
          KeySchema:
            - AttributeName: Title
              KeyType: HASH
            - AttributeName: Author
              KeyType: RANGE
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
  # Books DynamoDB Table Streams
  BooksTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt BooksTable.StreamArn
      StartingPosition: LATEST
      FunctionName: !GetAtt BooksStreamsProcessorFunction.Arn
  # API Gateway
  BooksAPI:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: !Ref APIName
      StageName: !Ref StageName
      Variables:
        lambdaAlias: !Ref LambdaAlias
      Cors:
        AllowMethods: "'*'"
        AllowOrigin: "'*'"
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for Books API
          Quota:
            Limit: 10
            Period: MONTH
          Throttle:
            BurstLimit: 2
            RateLimit: 1
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Sub BooksAPI-${StageName}
        paths:
          /:
            get:
              produces:
                - application/json
              x-amazon-apigateway-integration:
                uri: !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations"
                  - lambdaArn: !GetAtt GetAllBooksFunction.Arn
                    lambdaAlias: !Ref LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            post:
              x-amazon-apigateway-integration:
                uri: !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations"
                  - lambdaArn: !GetAtt CreateBooksFunction.Arn
                    lambdaAlias: !Ref LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            put:
              x-amazon-apigateway-integration:
                uri: !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations"
                  - lambdaArn: !GetAtt UpdateBookFunction.Arn
                    lambdaAlias: !Ref LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            patch:
              x-amazon-apigateway-integration:
                uri: !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations"
                  - lambdaArn: !GetAtt UpdateBookFunction.Arn
                    lambdaAlias: !Ref LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            delete:
              x-amazon-apigateway-integration:
                uri: !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations"
                  - lambdaArn: !GetAtt DeleteBooksFunction.Arn
                    lambdaAlias: !Ref LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /search:
            get:
              produces:
                - application/json
              x-amazon-apigateway-integration:
                uri: !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations"
                  - lambdaArn: !GetAtt SearchBooksFunction.Arn
                    lambdaAlias: !Ref LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
  # API Gateway Role to invoke Lambdas
  GetAllBooksLambdaApiGatewayInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetAllBooksFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*"
  CreateBooksApiGatewayInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateBooksFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*"
  SearchBooksApiGatewayInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SearchBooksFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*"
  UpdateBookApiGatewayInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateBookFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*"
  DeleteBooksApiGatewayInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteBooksFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*"
  # Books SNS Topic
  BooksTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: BooksStatusTopic
  # Books SNS Topic Subscription
  BooksTopicSubscription:
    Type: AWS::SNS::Subscription
    Condition: ContactEmailSet
    Properties:
      Endpoint: !Ref ContactEmailAddress
      Protocol: email
      TopicArn: !Ref BooksTopic
Outputs:
  APIURL:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${BooksAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
  APIName:
    Description: "API Gateway Name"
    Value: !Ref APIName
  Table:
    Description: "DynamoDB Table"
    Value: !Ref BooksTable