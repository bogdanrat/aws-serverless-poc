AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Serverless Books API
Parameters:
  APIName:
    Type: String
    Default: BooksAPI
    Description: The API Gateway name
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 20
    MinLength: 2
    ConstraintDescription: 2-20 Latin letters
  StageName:
    Type: String
    Default: dev
    Description: The API Gateway deployment stage
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 10
    MinLength: 2
    ConstraintDescription: 2-10 Latin letters
  LambdaAlias:
    Type: String
    Default: dev
    Description: The Lambda Alias to publish
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 10
    MinLength: 2
    ConstraintDescription: 2-10 Latin letters
  TableName:
    Type: String
    Default: Books
    Description: The DynamoDB Table Name
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 20
    MinLength: 3
    ConstraintDescription: 2-10 Latin letters
  TableCategoryIndex:
    Type: String
    Default: CategoryIndex
    Description: The DynamoDB Table Category Global Secondary Index Name
    MaxLength: 20
    MinLength: 3
  TableTitleIndex:
    Type: String
    Default: TitleIndex
    Description: The DynamoDB Table Title Global Secondary Index Name
    MaxLength: 20
    MinLength: 3
  BucketName:
    Type: String
    Default: aws-serverless-poc
    Description: The S3 Bucket for deployments
  ContactEmailAddress:
    Type: String
    Description: Email address for books notifications
Conditions:
  ContactEmailSet:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: ContactEmailAddress
Resources:
  GetAllBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetAllBooks
      Handler: main
      Runtime: go1.x
      AutoPublishAlias:
        Ref: LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role:
        Fn::GetAtt:
        - GetAllBooksFunctionRole
        - Arn
      CodeUri: s3://aws-serverless-poc/deployments/9925e7e5ab58e45a4d77203295e1f0f6
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          TABLE_NAME:
            Ref: BooksTable
      Events:
        GetBooksEvent:
          Type: Api
          Properties:
            Path: /books
            Method: GET
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  GetAllBooksFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: CreateCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: CreateCloudWatchMetricsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
      - PolicyName: GetDynamoDBTableItemsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Scan
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}/index/ID
  CreateBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateBooks
      Handler: main
      Runtime: go1.x
      AutoPublishAlias:
        Ref: LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role:
        Fn::GetAtt:
        - CreateBooksFunctionRole
        - Arn
      CodeUri: s3://aws-serverless-poc/deployments/90512d8760c2e8c27e81fbb359c37009
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          TABLE_NAME:
            Ref: BooksTable
      Events:
        CreateBooksEvent:
          Type: Api
          Properties:
            Path: /books
            Method: POST
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  CreateBooksFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: CreateCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: CreateCloudWatchMetricsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
      - PolicyName: WriteDynamoDBTableItemsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            Resource:
              Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}
  SearchBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SearchBooks
      Handler: main
      Runtime: go1.x
      AutoPublishAlias:
        Ref: LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role:
        Fn::GetAtt:
        - SearchBooksFunctionRole
        - Arn
      CodeUri: s3://aws-serverless-poc/deployments/25b8e2d4b1d678e725a6918f0876377c
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          TABLE_NAME:
            Ref: BooksTable
          TABLE_CATEGORY_INDEX_NAME:
            Ref: TableCategoryIndex
          TABLE_TITLE_INDEX_NAME:
            Ref: TableTitleIndex
      Events:
        SearchBooksEvent:
          Type: Api
          Properties:
            Path: /books/search
            Method: GET
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  SearchBooksFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: CreateCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: CreateCloudWatchMetricsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
      - PolicyName: GetDynamoDBTableItemsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:Query
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}/index/*
  UpdateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateBook
      Handler: main
      Runtime: go1.x
      AutoPublishAlias:
        Ref: LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role:
        Fn::GetAtt:
        - UpdateBookFunctionRole
        - Arn
      CodeUri: s3://aws-serverless-poc/deployments/5642a88fe103f33aeb5b00dc1eb3b98a
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          TABLE_NAME:
            Ref: BooksTable
      Events:
        FullUpdateBookEvent:
          Type: Api
          Properties:
            Path: /books
            Method: PUT
            RestApiId:
              Ref: BooksAPI
        PartialUpdateBookEvent:
          Type: Api
          Properties:
            Path: /books
            Method: PATCH
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  UpdateBookFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: CreateCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: CreateCloudWatchMetricsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
      - PolicyName: UpdateDynamoDBTableItemsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:UpdateItem
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}
  DeleteBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteBooks
      Handler: main
      Runtime: go1.x
      AutoPublishAlias:
        Ref: LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role:
        Fn::GetAtt:
        - DeleteBooksFunctionRole
        - Arn
      CodeUri: s3://aws-serverless-poc/deployments/28c9f708a94385ed548889a88948447b
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          TABLE_NAME:
            Ref: BooksTable
      Events:
        DeleteBooksEvent:
          Type: Api
          Properties:
            Path: /books
            Method: DELETE
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  DeleteBooksFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: CreateCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: CreateCloudWatchMetricsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
      - PolicyName: DeleteDynamoDBTableItemsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:BatchWriteItem
            - dynamodb:DeleteItem
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}
  BooksStreamsProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BooksStreamProcessor
      Handler: main
      Runtime: go1.x
      AutoPublishAlias:
        Ref: LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role:
        Fn::GetAtt:
        - BooksStreamsProcessorFunctionRole
        - Arn
      CodeUri: s3://aws-serverless-poc/deployments/41364bbfd3871faa0d1bc38b16baa7a4
      Environment:
        Variables:
          BOOKS_TOPIC_ARN:
            Ref: BooksTopic
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  BooksStreamsProcessorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: CreateCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: CreateCloudWatchMetricsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
      - PolicyName: UpdateDynamoDBTableItemsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
            Resource:
              Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}/stream/*
      - PolicyName: PublishBooksSNSTopicPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sns:publish
            Resource:
              Ref: BooksTopic
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BooksAPIAuth
      Handler: main
      Runtime: go1.x
      AutoPublishAlias:
        Ref: LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role:
        Fn::GetAtt:
        - AuthFunctionRole
        - Arn
      CodeUri: s3://aws-serverless-poc/deployments/0a23ce517d9247954b8acd266d9f10ce
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          COGNITO_USER_POOL_ID:
            Ref: BooksAPIUserPool
          COGNITO_APP_CLIENT_ID:
            Ref: UserPoolAppClient
      Events:
        SignUpEvent:
          Type: Api
          Properties:
            Path: /signup
            Method: POST
            RestApiId:
              Ref: BooksAPI
            Auth:
              Authorizer: NONE
        LogInEvent:
          Type: Api
          Properties:
            Path: /login
            Method: POST
            RestApiId:
              Ref: BooksAPI
            Auth:
              Authorizer: NONE
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  AuthFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: CreateCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: CognitoUserPoolPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cognito-idp:SignUp
            - cognito-idp:InitiateAuth
            Resource: '*'
  BooksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Ref: TableName
      AttributeDefinitions:
      - AttributeName: Author
        AttributeType: S
      - AttributeName: Title
        AttributeType: S
      - AttributeName: Category
        AttributeType: S
      KeySchema:
      - AttributeName: Author
        KeyType: HASH
      - AttributeName: Title
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      GlobalSecondaryIndexes:
      - IndexName:
          Ref: TableCategoryIndex
        KeySchema:
        - AttributeName: Category
          KeyType: HASH
        - AttributeName: Author
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
      - IndexName:
          Ref: TableTitleIndex
        KeySchema:
        - AttributeName: Title
          KeyType: HASH
        - AttributeName: Author
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  BooksTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn:
        Fn::GetAtt:
        - BooksTable
        - StreamArn
      StartingPosition: LATEST
      FunctionName:
        Fn::GetAtt:
        - BooksStreamsProcessorFunction
        - Arn
  BooksAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Ref: APIName
      StageName:
        Ref: StageName
      Variables:
        lambdaAlias:
          Ref: LambdaAlias
      Cors:
        AllowMethods: '''*'''
        AllowOrigin: '''*'''
        AllowHeaders: '''*'''
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for Books API
          Quota:
            Limit: 100
            Period: MONTH
          Throttle:
            BurstLimit: 2
            RateLimit: 1
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - BooksAPIUserPool
              - Arn
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Fn::Sub: BooksAPI-${StageName}
        paths:
          /books:
            get:
              produces:
              - application/json
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
                  - lambdaArn:
                      Fn::GetAtt:
                      - GetAllBooksFunction
                      - Arn
                    lambdaAlias:
                      Ref: LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
                  - lambdaArn:
                      Fn::GetAtt:
                      - CreateBooksFunction
                      - Arn
                    lambdaAlias:
                      Ref: LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            put:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
                  - lambdaArn:
                      Fn::GetAtt:
                      - UpdateBookFunction
                      - Arn
                    lambdaAlias:
                      Ref: LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            patch:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
                  - lambdaArn:
                      Fn::GetAtt:
                      - UpdateBookFunction
                      - Arn
                    lambdaAlias:
                      Ref: LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            delete:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
                  - lambdaArn:
                      Fn::GetAtt:
                      - DeleteBooksFunction
                      - Arn
                    lambdaAlias:
                      Ref: LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /books/search:
            get:
              produces:
              - application/json
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
                  - lambdaArn:
                      Fn::GetAtt:
                      - SearchBooksFunction
                      - Arn
                    lambdaAlias:
                      Ref: LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
  BooksAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - SignUpMethod
    - LoginMethod
    Properties:
      RestApiId:
        Ref: BooksAPI
  SignUpResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: BooksAPI
      ParentId:
        Fn::GetAtt:
        - BooksAPI
        - RootResourceId
      PathPart: signup
  SignUpMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: BooksAPI
      ResourceId:
        Ref: SignUpResource
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
          - lambdaArn:
              Fn::GetAtt:
              - AuthFunction
              - Arn
            lambdaAlias:
              Ref: LambdaAlias
  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: BooksAPI
      ParentId:
        Fn::GetAtt:
        - BooksAPI
        - RootResourceId
      PathPart: login
  LoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: BooksAPI
      ResourceId:
        Ref: LoginResource
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
          - lambdaArn:
              Fn::GetAtt:
              - AuthFunction
              - Arn
            lambdaAlias:
              Ref: LambdaAlias
  GetAllBooksLambdaApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetAllBooksFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*
  CreateBooksApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: CreateBooksFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*
  SearchBooksApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SearchBooksFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*
  UpdateBookApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UpdateBookFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*
  DeleteBooksApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: DeleteBooksFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*
  BooksTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: BooksStatusTopic
  BooksTopicSubscription:
    Type: AWS::SNS::Subscription
    Condition: ContactEmailSet
    Properties:
      Endpoint:
        Ref: ContactEmailAddress
      Protocol: email
      TopicArn:
        Ref: BooksTopic
  BooksAPIUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: BooksAPIUserPool
      UsernameAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        EmailSubject: Verify your email id for ${BooksAPI}
        EmailMessage: Please click the link below to verify your email address. {####}
  UserPoolAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: BooksAPIUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId:
        Ref: BooksAPIUserPool
      Domain:
        Fn::Sub:
        - ${AWS::AccountId}-${stage}-domain
        - stage:
            Ref: StageName
Outputs:
  APIURL:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${BooksAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
  APIName:
    Description: API Gateway Name
    Value:
      Ref: APIName
  Table:
    Description: DynamoDB Table
    Value:
      Ref: BooksTable
