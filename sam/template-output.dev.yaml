AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Serverless Books API
Parameters:
  StageName:
    Type: String
    Default: dev
    Description: The API Gateway deployment stage
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 10
    MinLength: 2
    ConstraintDescription: 2-10 Latin letters
  LambdaAlias:
    Type: String
    Default: dev
    Description: The Lambda Alias to publish
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 10
    MinLength: 2
    ConstraintDescription: 2-10 Latin letters
  TableName:
    Type: String
    Default: Books
    Description: The DynamoDB Table Name
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 20
    MinLength: 3
    ConstraintDescription: 2-10 Latin letters
  TableCategoryIndex:
    Type: String
    Default: CategoryIndex
    Description: The DynamoDB Table Category Global Secondary Index Name
    MaxLength: 20
    MinLength: 3
  TableTitleIndex:
    Type: String
    Default: TitleIndex
    Description: The DynamoDB Table Title Global Secondary Index Name
    MaxLength: 20
    MinLength: 3
  BucketName:
    Type: String
    Default: aws-serverless-poc
    Description: The S3 Bucket for deployments
Resources:
  GetAllBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetAllBooks
      Handler: main
      Runtime: go1.x
      AutoPublishAlias:
        Ref: LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role:
        Fn::GetAtt:
        - GetAllBooksFunctionRole
        - Arn
      CodeUri: s3://aws-serverless-poc/deployments/c37d06f883f8a8162f17fcef51c86752
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          TABLE_NAME:
            Ref: BooksTable
      Events:
        GetBooksEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  GetAllBooksFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: CreateCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: CreateCloudWatchMetricsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
      - PolicyName: GetDynamoDBTableItemsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Scan
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}/index/ID
  CreateBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateBooks
      Handler: main
      Runtime: go1.x
      AutoPublishAlias:
        Ref: LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role:
        Fn::GetAtt:
        - CreateBooksFunctionRole
        - Arn
      CodeUri: s3://aws-serverless-poc/deployments/d9b5feff42aae62293754c4ee62d74e4
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          TABLE_NAME:
            Ref: BooksTable
      Events:
        CreateBooksEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  CreateBooksFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: CreateCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: CreateCloudWatchMetricsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
      - PolicyName: WriteDynamoDBTableItemsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            Resource:
              Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}
  SearchBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SearchBooks
      Handler: main
      Runtime: go1.x
      AutoPublishAlias:
        Ref: LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role:
        Fn::GetAtt:
        - SearchBooksFunctionRole
        - Arn
      CodeUri: s3://aws-serverless-poc/deployments/dac7573335914b6ed374e09c75785c32
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          TABLE_NAME:
            Ref: BooksTable
          TABLE_CATEGORY_INDEX_NAME:
            Ref: TableCategoryIndex
          TABLE_TITLE_INDEX_NAME:
            Ref: TableTitleIndex
      Events:
        SearchBooksEvent:
          Type: Api
          Properties:
            Path: /search
            Method: get
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  SearchBooksFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: CreateCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: CreateCloudWatchMetricsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
      - PolicyName: GetDynamoDBTableItemsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:Query
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}/index/*
  UpdateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateBook
      Handler: main
      Runtime: go1.x
      AutoPublishAlias:
        Ref: LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role:
        Fn::GetAtt:
        - UpdateBookFunctionRole
        - Arn
      CodeUri: s3://aws-serverless-poc/deployments/e037d0d6fa723c38b5f72a83cf037bd8
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          TABLE_NAME:
            Ref: BooksTable
      Events:
        FullUpdateBookEvent:
          Type: Api
          Properties:
            Path: /
            Method: put
            RestApiId:
              Ref: BooksAPI
        PartialUpdateBookEvent:
          Type: Api
          Properties:
            Path: /
            Method: patch
            RestApiId:
              Ref: BooksAPI
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  UpdateBookFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: CreateCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: CreateCloudWatchMetricsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
      - PolicyName: UpdateDynamoDBTableItemsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:UpdateItem
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}
  BooksStreamsProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BooksStreamProcessor
      Handler: main
      Runtime: go1.x
      AutoPublishAlias:
        Ref: LambdaAlias
      DeploymentPreference:
        Type: AllAtOnce
      Role:
        Fn::GetAtt:
        - BooksStreamsProcessorFunctionRole
        - Arn
      CodeUri: s3://aws-serverless-poc/deployments/f89cab45b8c48fca514beb7909c3398d
      ReservedConcurrentExecutions: 10
      Timeout: 600
      MemorySize: 128
  BooksStreamsProcessorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: CreateCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: CreateCloudWatchMetricsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
      - PolicyName: UpdateDynamoDBTableItemsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
            Resource:
              Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BooksTable}/stream/*
  BooksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Ref: TableName
      AttributeDefinitions:
      - AttributeName: Author
        AttributeType: S
      - AttributeName: Title
        AttributeType: S
      - AttributeName: Category
        AttributeType: S
      KeySchema:
      - AttributeName: Author
        KeyType: HASH
      - AttributeName: Title
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      GlobalSecondaryIndexes:
      - IndexName:
          Ref: TableCategoryIndex
        KeySchema:
        - AttributeName: Category
          KeyType: HASH
        - AttributeName: Author
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
      - IndexName:
          Ref: TableTitleIndex
        KeySchema:
        - AttributeName: Title
          KeyType: HASH
        - AttributeName: Author
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  BooksTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn:
        Fn::GetAtt:
        - BooksTable
        - StreamArn
      StartingPosition: LATEST
      FunctionName:
        Fn::GetAtt:
        - BooksStreamsProcessorFunction
        - Arn
  BooksAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: BooksAPI
      StageName:
        Ref: StageName
      Variables:
        lambdaAlias:
          Ref: LambdaAlias
      Cors:
        AllowMethods: '''*'''
        AllowOrigin: '''*'''
      MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        ThrottlingBurstLimit: 2
        ThrottlingRateLimit: 1
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Fn::Sub: BooksAPI-${StageName}
        paths:
          /:
            get:
              produces:
              - application/json
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
                  - lambdaArn:
                      Fn::GetAtt:
                      - GetAllBooksFunction
                      - Arn
                    lambdaAlias:
                      Ref: LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
                  - lambdaArn:
                      Fn::GetAtt:
                      - CreateBooksFunction
                      - Arn
                    lambdaAlias:
                      Ref: LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            put:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
                  - lambdaArn:
                      Fn::GetAtt:
                      - UpdateBookFunction
                      - Arn
                    lambdaAlias:
                      Ref: LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            patch:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
                  - lambdaArn:
                      Fn::GetAtt:
                      - UpdateBookFunction
                      - Arn
                    lambdaAlias:
                      Ref: LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /search:
            get:
              produces:
              - application/json
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}:${lambdaAlias}/invocations
                  - lambdaArn:
                      Fn::GetAtt:
                      - SearchBooksFunction
                      - Arn
                    lambdaAlias:
                      Ref: LambdaAlias
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
  GetAllBooksLambdaApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetAllBooksFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*
  CreateBooksApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: CreateBooksFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*
  SearchBooksApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SearchBooksFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*
  UpdateBookApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UpdateBookFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BooksAPI}/*/*/*
Outputs:
  Api:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${BooksAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
  Table:
    Description: DynamoDB Table
    Value:
      Ref: BooksTable
